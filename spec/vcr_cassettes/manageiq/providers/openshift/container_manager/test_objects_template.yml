apiVersion: v1
kind: Template
metadata:
  name: template-test
  annotations:
    description: "Description"
    iconClass: "Icon"
    tags: "database,nosql"
objects:
- apiVersion: v1
  kind: Pod
  metadata:
    name: my-pod-${INDEX}
    labels:
      key-pod-label: "value-pod-label"
  spec:
    containers:
    - env:
      image: registry.access.redhat.com/jboss-decisionserver-6/decisionserver63-openshift
      name: my-container
      ports:
      - containerPort: 6379
        protocol: TCP
      securityContext:
        privileged: true
        seLinuxOptions:
          level: "s0:c123,c456"
          user: "username"
          role: "admin"
          type: "default"
    volumes:
    - name: my-pvc-pod-volume-${INDEX}
      persistentVolumeClaim:
        claimName: my-persistentvolumeclaim-${INDEX}
- apiVersion: v1
  kind: Route
  metadata:
    name: my-route-${INDEX}
    labels:
      key-route-label: "value-route-label"
  spec:
    to:
      kind: Service
      name: service-name
- apiVersion: v1
  kind: Service
  metadata:
    name: my-service-${INDEX}
  spec:
    selector:
      docker-registry: default
    ports:
    - nodePort: 0
      port: 5000
      protocol: TCP
      targetPort: 5000
- apiVersion: v1
  kind: Service
  metadata:
    name: my-service-empty-${INDEX}
  spec:
    selector:
      no-such-label: no-such-value
    ports:
    - nodePort: 0
      port: 5000
      protocol: TCP
      targetPort: 5000
- apiVersion: v1
  kind: Service
  metadata:
    name: my-service-without-selector-${INDEX}
  spec:
    ports:
    - nodePort: 0
      port: 5000
      protocol: TCP
      targetPort: 5000
- apiVersion: v1
  kind: "BuildConfig"
  metadata:
    name: my-build-config-${INDEX}
  spec:
    runPolicy: "Serial"
    triggers:
      -
        type: "GitHub"
        github:
          secret: "secret101"
      - type: "Generic"
        generic:
          secret: "secret101"
      -
        type: "ImageChange"
    source:
      git:
        uri: "https://github.com/openshift/ruby-hello-world"
    strategy:
      sourceStrategy:
        from:
          kind: "DockerImage"
          name: "openshift/ruby-22-centos7:latest"
    output:
      to:
        kind: "ImageStreamTag"
        name: "origin-ruby-sample:latest"
    postCommit:
        script: "bundle exec rake test"
- apiVersion: v1
  kind: "ImageStream"
  metadata:
    creationTimestamp: 2017-07-16T16:14:06Z
    generation: 1
    name: origin-ruby-sample
    namespace: my-project-3
    resourceVersion: "8327"
    selfLink: /oapi/v1/namespaces/my-project-3/imagestreams/origin-ruby-sample
    uid: caaf466d-6a41-11e7-b2e6-001a4a1626e8
- apiVersion: "v1"
  kind: "LimitRange"
  metadata:
    name: my-limit-range-${INDEX}
  spec:
    limits:
      - type: "Pod"
        max:
          cpu: "2"
          memory: "1Gi"
        min:
          cpu: "200m"
          memory: "6Mi"
      - type: "Container"
        max:
          cpu: "2"
          memory: "1Gi"
        min:
          cpu: "100m"
          memory: "4Mi"
        default:
          cpu: "300m"
          memory: "200Mi"
        defaultRequest:
          cpu: "200m"
          memory: "100Mi"
        maxLimitRequestRatio:
          cpu: "10"
- apiVersion: v1
  kind: ReplicationController
  metadata:
    name: my-replicationcontroller-${INDEX}
  spec:
    replicas: 0
    selector:
      app: nginx
    template:
      metadata:
        name: nginx
        labels:
          app: nginx
      spec:
        containers:
        - name: nginx
          image: nginx
          ports:
          - containerPort: 80
- apiVersion: v1
  kind: Template
  metadata:
    name: my-template-${INDEX}
    annotations:
      description: "Description"
      iconClass: "icon"
      tags: "database,nosql"
  objects:
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: my-persistentvolumeclaim-in-my-template-${INDEX}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 8Gi
  parameters:
  - name: MYPARAM
    value: my-value
- apiVersion: v1
  kind: PersistentVolume
  metadata:
    name: my-persistentvolume-${INDEX}
    labels:
      my-pv-label: my-pv-${INDEX}
  spec:
    storageClassName: manual
    capacity:
      storage: 10Mi
    accessModes:
      - ReadWriteOnce
    hostPath:
      path: "/tmp/my-persistentvolume-${INDEX}"
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: my-persistentvolumeclaim-${INDEX}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 8Mi
    selector:
      matchLabels:
        my-pv-label: my-pv-${INDEX}
    storageClassName: manual
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: my-persistentvolumeclaim-pending-${INDEX}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 8Mi
    storageClassName: no-pv-will-match-this-class
- apiVersion: v1
  kind: ResourceQuota
  metadata:
    name: my-resource-quota-${INDEX}
  spec:
    hard:
      configmaps: "10"
      persistentvolumeclaims: "4"
      replicationcontrollers: "20"
      secrets: "10"
      services: "10"
- apiVersion: v1
  kind: ResourceQuota
  metadata:
    name: my-resource-quota-scopes1-${INDEX}
  spec:
    scopes:
    - NotTerminating
    hard:
      pods: "6"
      requests.cpu: "10.3"
- apiVersion: v1
  kind: ResourceQuota
  metadata:
    name: my-resource-quota-scopes2-${INDEX}
  spec:
    scopes:
    - Terminating
    - NotBestEffort
    hard:
      pods: "3"
      requests.cpu: "5.7"
      requests.memory: "10240Mi"
parameters:
- name: INDEX
  value: "0"
